---
include:
  - "https://ci-reuse.fala.cl/lint/yaml/.include.yml"
  - "https://ci-reuse.fala.cl/build/docker/.include.yml"
  - "https://ci-reuse.fala.cl/lint/helm/.include.yml"
  - "https://ci-reuse.fala.cl/deploy/gcloud/helm/.include.yml"
  - project: 'adessa/devsecops/templates/clair-plugin'
    ref: v-2.1-2.4.0
    file: '/template/.ci-template.yml'
  - project: 'adessa/devsecops/templates/dependencycheck-plugin'
    ref: v-3.1-5.3.0
    file: '/template/.ci-template.yml'
  - project: 'adessa/devsecops/templates/nodejs-scan-plugin'
    ref: v-1.0-3.7
    file: '/template/.ci-template.yml'

variables:
  YAMLLINT_INPUT: ".gitlab-ci.yml"
  CI_PROJECT_NAME: "seller-service"
  HELM_PATH: "deployment/charts/${CI_PROJECT_NAME}"
  HELM_CONFIG: "deployment/charts/config"
  DOCKER_BUILD_ARG: "--build-arg NPM_USERNAME --build-arg NPM_TOKEN"
  PROJECT_NAME: "${CI_PROJECT_NAME}"
  DC_TARGET_LANG: "node"

stages:
  - build-cache
  - lint
  - test
  - build
  - audit
  - dev-deploy
  #- dev-test
  - staging-deploy
  #- staging-test
  - prod-deploy
  #- production-test

# only checks if test yaml is ok
helm:
  stage: lint
  environment:
    name: dev
  variables:
    HELM_OPTS: "--values ${HELM_CONFIG}/values-${CI_ENVIRONMENT_NAME}.yaml"
  image:
    name: lachlanevenson/k8s-helm:v2.11.0
    entrypoint: [""]
  script:
    - helm lint $HELM_OPTS $HELM_PATH

# building the artifact
build-cache:
  stage: build-cache
  image: mhart/alpine-node:10
  before_script:
    - npm config set @ci-reuse:registry=https://fala.cl/npm/
    - export AUTH=$(echo "$NPM_USERNAME:$NPM_TOKEN" | base64)
    - npm config set //fala.cl/npm/:_auth=$AUTH
  script:
    - npm ci --no-audit
  artifacts:
    paths:
      - node_modules
    name: ${CI_JOB_ID}
    expire_in: 1 hour
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/

node:
  stage: lint
  dependencies:
    - build-cache
  image: node:12.16.2-alpine3.10
  script:
    - npm run lint

unit_tests:
  stage: test
  dependencies:
    - build-cache
  image: node:12.16.2-alpine3.10
  script:
    - npm rebuild
    - npm run test:unit
  coverage: /^All files[^|]*\|[^|]*\s+([\d\.]+)/

################################
# environment: dev
################################
deploy_dev:
  extends: .helm_deploy
  stage: dev-deploy
  only:
    - master
  environment:
    name: dev
  variables:
    K8_CLUSTER_NAME: ${K8_CLUSTER_NAME}
    K8_CLUSTER_REGION: ${K8_CLUSTER_REGION}
    K8_NAMESPACE: ${K8_NAMESPACE}
    HELM_RELEASE_NAME: ${CI_PROJECT_NAME}
    HELM_OPTS: --set-string image.pullSecret.registry=${CI_REGISTRY}
      --set-string image.pullSecret.username=${DEPLOY_TOKEN}
      --set-string image.pullSecret.password=${DEPLOY_PASSWORD}
      --set-string environmentVariables.PROJECT_ID=${GCP_PROJECT_ID}
      --set-string environmentVariables.GCLOUD_PROJECT=${GCP_PROJECT_ID}
      --set-string environmentVariables.ENVIRONMENT=${CI_ENVIRONMENT_NAME}
      --values deployment/charts/config/values-${CI_ENVIRONMENT_NAME}.yaml

################################
# environment: staging
###############################
deploy_staging:
  extends: .helm_deploy
  stage: staging-deploy
  environment:
    name: staging
  variables:
    GCP_ACCOUNT_CREDENTIALS: ${GCP_ACCOUNT_CREDENTIALS}
    GCP_PROJECT_ID: ${GCP_PROJECT_ID}
    K8_CLUSTER_NAME: ${K8_CLUSTER_NAME}
    K8_CLUSTER_REGION: ${K8_CLUSTER_REGION}
    K8_NAMESPACE: ${K8_NAMESPACE}
    HELM_RELEASE_NAME: ${CI_PROJECT_NAME}
    HELM_OPTS: --set-string image.pullSecret.registry=${CI_REGISTRY}
      --set-string image.pullSecret.enabled=true
      --set-string image.pullSecret.username=${DEPLOY_TOKEN}
      --set-string image.pullSecret.password=${DEPLOY_PASSWORD}
      --set-string environmentVariables.PROJECT_ID=${GCP_PROJECT_ID}
      --set-string environmentVariables.NAME_SPACE=${DS_NAMESPACE}
      --values ${HELM_CONFIG}/values-${CI_ENVIRONMENT_NAME}.yaml
  only:
    - tags
  when: manual

################################
# environment: production
###############################
deploy_production:
  extends: .helm_deploy
  stage: prod-deploy
  environment:
    name: production
  variables:
    GCP_ACCOUNT_CREDENTIALS: ${GCP_ACCOUNT_CREDENTIALS}
    GCP_PROJECT_ID: ${GCP_PROJECT_ID}
    K8_CLUSTER_NAME: ${K8_CLUSTER_NAME}
    K8_CLUSTER_REGION: ${K8_CLUSTER_REGION}
    K8_NAMESPACE: ${K8_NAMESPACE}
    HELM_RELEASE_NAME: ${CI_PROJECT_NAME}
    HELM_OPTS: --set-string image.pullSecret.registry=${CI_REGISTRY}
      --set-string image.pullSecret.enabled=true
      --set-string image.pullSecret.username=${DEPLOY_TOKEN}
      --set-string image.pullSecret.password=${DEPLOY_PASSWORD}
      --set-string environmentVariables.PROJECT_ID=${GCP_PROJECT_ID}
      --set-string environmentVariables.NAME_SPACE=${DS_NAMESPACE}
      --values ${HELM_CONFIG}/values-${CI_ENVIRONMENT_NAME}.yaml
  only:
    - tags
  when: manual
